<h2>Experimental: Observables</h2>

<p>
  <strong>ember-concurrency</strong> integrates with Observables
  and lets you apply the same concurrency constraints to
  subscriptions to Observables that you could apply to a task &mdash;
  just as you can configure a Task to <code>drop()</code> new
  <code>.perform()</code>s while the task is already running, so can
  you configure the subscription to an async sequence of events
  (the Observable) to <code>drop()</code> events while the
  previous event is being handled (or use any other task modifier
  you like).
</p>

<h2>Live Example</h2>

<h3>Nested loop of Observable range of numbers</h3>

<button class="button" onclick={{perform computeStuff}}>Compute Stuff</button>

<pre>{{#each values as |v|}}{{v.message}}{{/each}}</pre>

{{docs-snippet name="observables-timetable.js"}}

<h3>Subscribing to Observable of Evented events</h3>

<h4>Status: {{fooStatus}}</h4>

<button class="button" {{action 'triggerFoo'}}>Trigger Foo</button>

{{docs-snippet name="observables-evented.js"}}

