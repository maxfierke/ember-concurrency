<h2>Decorating (or Composing) Tasks</h2>

<p>
  Sometimes you'll want to write a task that simply runs
  another task, but with some added behavior. One example
  is a button with a cooldown period after the underyling
  task has finished running. In such a case, it might be
  tempting to put the cooldown timer on the underlying
  task, but if the underlying task is shared between many
  consumers that <em>don't</em> require that cooldown time,
  then you'd be foisting your cooldown needs on everyone
  else who might depend on that shared resource.
</p>

<p>
  ember-concurrency task are composable, such that it's
  easy to write tasks that decorate another task with added
  behavior, as shown in the example below:
</p>

<h2>Live Example</h2>

<h3>Shared Task: {{sharedTask.state}}</h3>

<p>
  The following buttons use the <code>.isIdle</code> property of Task
  to stylize the buttons as clickable. <code>isIdle</code> is false only
  when the task is actively running, which explains why, when clicking
  buttons in the top row, only the one you click is stylized as inactive,
  while the others still look clickable (because they both perform different
  tasks). In fact, clicking these active-looking
  buttons while <code>sharedTask</code> is still running will result in those
  clicks being ignored since the both <code>sharedTask</code> and the tasks
  with cooldown applied, are configured to <code>drop</code> performs while
  they're running.
</p>

{{#docs-demo as |demo|}}
  {{#demo.example name='decorating-tasks-template-isIdle.hbs'}}
    {{#each tasks as |task|}}
      <button class="button" {{action task.perform}} class={{if task.isIdle 'button-primary'}}>
        {{task.name}}
      </button>
    {{/each}}
  {{/demo.example}}

  {{demo.snippet "decorating-tasks-template-isIdle.hbs"}}
  {{demo.snippet "decorating-tasks.js"}}
{{/docs-demo}}

<p>
  The buttons below use <code>.performWillSucceed</code> instead of <code>.isIdle</code>
  to stylize the buttons as clickable. <code>.performWillSucceed</code> is true
  when the state of the task is such that calling <code>.perform()</code> on it
  will immediately execute (rather than being dropped or enqueued). While <code>isIdle</code>
  only takes into considering whether the specified task is running,
  <code>.performWillSucceed</code> takes into consideration whether the linked task
  (via the string arg path to the task) can be performed at this time.
  This explains why the buttons below <em>all</em> are stylized as unclickable when
  <em>anyone</em> is performing <code>sharedTask</code>.
</p>

{{#docs-demo as |demo|}}
  {{#demo.example name='decorating-tasks-template-performWillSucceed.hbs'}}
    {{#each tasks as |task|}}
      <button class="button" {{action task.perform}} class={{if task.performWillSucceed 'button-primary'}}>
        {{task.name}}
      </button>
    {{/each}}
  {{/demo.example}}

  {{demo.snippet "decorating-tasks-template-performWillSucceed.hbs"}}
  {{demo.snippet "decorating-tasks.js"}}
{{/docs-demo}}
