<h2>Task Groups (beta)</h2>

<p>
  To constrain the concurrency of a single task,
  you use {{link-to 'Task Modifiers' 'docs.task-concurrency'}},
  but what if you want to ensure that
  two (or more) separate tasks don't run at the same time?
  In these cases, you use <strong>Task Groups</strong>:
</p>

<ol>
  <li>Declare a task group via <code>nameOfGroup: taskGroup()</code></li>
  <li>
    Apply any desired {{link-to 'Task Modifiers' 'docs.task-concurrency'}}
    to that task group (just as you would with a normal task).
  </li>
  <li>
    Append <code>.group('nameOfGroup')</code> to any tasks you want to
    be considered part of the group.
  </li>
</ol>

<p>
  Whereas using a modifier like <code>drop()</code> on a single task
  prevents that single task from running concurrently, using
  <code>drop()</code> on a Task Group ensures that only one
  task in that Task Group can be running at any given time.
</p>

<h4>Cancelation</h4>

<p>
  Additionally, just as you can <code>cancelAll</code> running
  instances of a task, the Task Group object exposes the
  same <code>cancelAll</code> method (and <code>cancel-all</code>
  template helper) which will cancel any running task instances
  that belong to that group.
</p>

<h4>Nested Task Groups</h4>

<p>
  Task Groups can be <strong>.group()</strong>ed to other
  Task Groups, forming a hierarchy with Tasks at the leaves.
  In such a hierarchy, all Tasks will share the concurrency
  constraints of the root task group
</p>

<h2>Live Examples</h2>

<p>
  The following examples demonstrate nested task groups
</p>

{{docs-snippet name="task-groups.js"}}
{{docs-snippet name="task-group-component.js"}}

{{! BEGIN-SNIPPET task-groups-template.hbs }}
{{#each taskGroups as |group|}}
  {{task-group-example taskGroup=group}}
{{/each}}
{{! END-SNIPPET }}

